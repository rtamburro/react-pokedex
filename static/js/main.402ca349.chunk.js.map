{"version":3,"sources":["services/pokemon.js","helpers/pokemonTypes.js","components/Card/Card.js","components/Card/index.js","components/Navbar/Navbar.js","components/Navbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","className","src","sprites","front_default","alt","name","types","map","type","class","style","backgroundColor","pokemonType","weight","height","abilities","ability","Navbar","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","next","previous","loadingPokemon","results","fetchData","prev","all","pokemonRecord","_pokemonData","color","size","onClick","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.402ca349.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            resolve(data);\n        })\n    })\n}\n\nexport async function getPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            resolve(data);\n        })\n    })\n}","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","import React from 'react';\nimport pokemonType from '../../helpers/pokemonTypes';\n\nfunction Card({ pokemon }) {\n    return (\n        <div className=\"mt-8 ml-12 mr-12 text-center capitalize bg-gray-600 shadow-lg Card rounded-xl\">\n            <div className=\"Card__img\">\n                <img className=\"mx-auto\" src={pokemon.sprites.front_default} alt=\"\"/>\n            </div>\n            <div className=\"mb-4 text-xl font-semibold Card__name\">\n                {pokemon.name}\n            </div>\n            <div className=\"flex justify-center mx-24 mb-4 space-between Card__types \">\n                {pokemon.types.map(type => {\n                    return (\n                        <div class=\"Card__type btn-type\" style={{ backgroundColor: pokemonType[type.type.name]}} >{type.type.name}</div>\n                    )\n                })}\n            </div>\n            <div className=\"Card__info\">\n                <div className=\"mb-4 Card__data Card__data--weight\">\n                    <p className=\"title\">Weight: {pokemon.weight}lbs</p>\n                </div>\n                <div className=\"mb-4 Card__data Card__data--height\">\n                    <p className=\"title\">Height: {pokemon.height}ft</p>\n                </div>\n                <div className=\"mb-4 Card__data Card__data--ability\" >\n                    <p className=\"title\">Abilities: {pokemon.abilities[0].ability.name}</p>\n                </div>\n            </div>\n        </div>\n\n        )\n}\n\nexport default Card;","import Card from './Card'\n\nexport default Card ","import React from 'react';\n\nfunction Navbar() {\n    return <div className=\"pt-3 pb-3 text-2xl font-bold text-center text-white bg-red-600 shadow-lg Navbar\">Pokedex-React</div>;\n}\n\nexport default Navbar;","import Navbar from './Navbar';\n\nexport default Navbar;","import React, {useState, useEffect} from 'react';\nimport { getAllPokemon, getPokemon } from './services/pokemon';\nimport Card from './components/Card';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState(\"\");\n  const [prevUrl, setPrevUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const initialUrl = \"https://pokeapi.co/api/v2/pokemon/?limit=12\"\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      await loadingPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, [])\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl)\n    await loadingPokemon(data.results)\n    setNextUrl(data.next);\n    setPrevUrl(data.prevUrl);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl)\n    await loadingPokemon(data.results)\n    setNextUrl(data.next);\n    setPrevUrl(data.prevUrl);\n    setLoading(false);\n  }\n\n  const loadingPokemon = async (data) => {\n    let _pokemonData = await Promise.all(\n      data.map(async pokemon => {\n        let pokemonRecord = await getPokemon(pokemon.url);\n        return pokemonRecord;\n      })\n    );\n\n    setPokemonData(_pokemonData);\n  };\n\n\n  return (\n  <div className=\"bg-gray-700 \">\n    {\n      loading ? \n      <div className=\"flex items-center justify-center h-screen bg-gray-700\">\n        <ClipLoader color={\"#D0021B\"} loading={loading} size={150} />\n      </div>\n      : (\n        <>\n        <Navbar />\n        <div className=\"flex justify-center btn\">\n          <button className=\"btn-direct\" onClick={prev}>Back</button>\n          <button className=\"btn-direct\" onClick={next}>Next</button>\n        </div>\n          <div className=\"grid justify-center grid-cols-1 overflow-hidden font-mono text-white md:grid-cols-3\">\n            {pokemonData.map((pokemon, i) => {\n              return <Card key={i} pokemon={pokemon}/>\n            })}\n          </div>\n          <div className=\"flex justify-center btn\">\n            <button className=\"mb-8 btn-direct\" onClick={prev}>Back</button>\n            <button className=\"mb-8 btn-direct\" onClick={next}>Next</button>\n        </div>\n        </> \n      )\n    }\n  </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}